# Import necessary libraries
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plot
import seaborn as sns
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.stats.diagnostic import acorr_ljungbox

# Download the data
data = yf.download("AAPL", start="2015-01-01", end="2020-06-04")
print(data.head())

# Plot the stock price
plt.figure(figsize=(14, 7))
plt.plot(data['Close'])
plt.title('AAPL Stock Price')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()

# ADF Test
adf_result = adfuller(data['Close'].dropna())
print(f'ADF Statistic: {adf_result[0]}')
print ( f'p-value: {adf_result[1]}')

# Plot ACF and PACF
plt. figure (figsize= (14, 7))
plt.subplot(1, 2, 1)
plot_acf(data['Close'].dropna(), ax=plt.gca())
plt.title('ACF of AAPL Close Price')

plt.subplot(1, 2, 2)
plot_pacf(data['Close'].dropna(), ax=plt.gca())
plt.title('PACF of AAPL Close Price')
plt.show()

# Fit ARIMA model
model = ARIMA(data['Close'].dropna(), order=(5,1,2))
model_fit = model.fit()
print(model_fit.summary())

# Diagnostics on Residuals
residuals = model_fit.resid

plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
plt.plot(residuals)
plt.title('Residuals (ARIMA (5,1,2)) vs. Time')

plt.subplot(1, 2, 2)
sns.histplot(residuals, kde=True)
plt.title('Histogram of Residuals')
plt.show()

# Diagnostics tests for ARIMA
lb_test = acorr_ljungbox(residuals, lags=[2], return_df=True)
print(lb_test)

# Forecasting
forecast_result = model_fit.get_forecast(steps=30)
forecast_mean = forecast_result.predicted_mean
forecast_conf_int = forecast_result.conf_int ()

plt.figure (figsize=(14, 7))
plt.plot (data.index, data['Close'], label='Observed')
plt.plot(pd.date_range(start=data.index[-1], periods=31, closed='right'), forecast_mean, color='red', label='Forecast')
plt.fill_between(pd.date_range(start=data.index[-1], periods=31, closed='right'), 
                 forecast_conf_int.iloc[:, 0], 
                 forecast_conf_int.iloc [:, 1], color='red', alpha=0.3)
plt.title('Forecast of AAPL Stock Price')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Train and test split
n = int(len(data) * 0.8)
train = data['Close'][:n]
test = data['Close'][n:]

# Fit ARIMA model on training set
train_model = ARIMA(train, order=(5,1,2))
train_model_fit = train_model.fit()
train_forecast = train_model_fit.get_forecast(steps=len(test))
mean_forecast = train_forecast.predicted_mean

# Plot mean predicted values vs real data
plt.figure(figsize=(14, 7))
plt.plot(mean_forecast, color='red', label='Predicted')
plt.plot(test.index, test, color='blue', label='Observed')
plt.title('Mean Predicted Values vs Real Data')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()
